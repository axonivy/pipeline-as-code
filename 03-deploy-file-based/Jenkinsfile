pipeline {
  agent {
    docker {
      image 'maven:3.6.2'
      args '--network=build-environment_default'
    }
  }

  triggers {
    cron '@midnight'
    pollSCM '@hourly'
  }

  stages {
    stage('packaging') {
      steps {
        dir ('quick-start-tutorial') {
      	  sh 'mvn clean package -B'
          archiveArtifacts 'target/*.iar'
        }
      }
    }

    stage('deploy') {
      steps {
        sshagent(['ivyserver']) {
          script {
            dir ('quick-start-tutorial') {
              sh "scp target/quick-start-tutorial-7.4.0-SNAPSHOT.iar ivy@example.com:/usr/lib/axonivy-engine/deploy/quick-start-tutorial.iar"
              waitUntilDeployed()
              checkDeploymentLog()
            }
          }
        }
      }
    }
  }
}

def waitUntilDeployed() {
  timeout(2) {
    waitUntil {
      script {
        def deployed = sh script: 'ssh ivy@example.com [ ! -f /usr/lib/axonivy-engine/deploy/quick-start-tutorial.iar ]', returnStatus: true
        return (deployed == 0);
      }
    }
  }
}
  
def checkDeploymentLog() {
  def errorLogExist = sh script: 'ssh ivy@example.com [ ! -f /usr/lib/axonivy-engine/deploy/quick-start-tutorial.iar.deploymentError ]', returnStatus: true
  if (errorLogExist == 1) {
    sh "ssh ivy@example.com cat /usr/lib/axonivy-engine/deploy/quick-start-tutorial.iar.deploymentError"
    currentBuild.result = 'FAILURE'
  } else {
    sh "ssh ivy@example.com cat /usr/lib/axonivy-engine/deploy/quick-start-tutorial.iar.deploymentLog"
  }
}